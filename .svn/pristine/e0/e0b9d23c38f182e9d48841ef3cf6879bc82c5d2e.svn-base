/**
 * Project Name	: Chitfund
 * Class Name	: Settings
 * Date			: 02-06-2014, 1:29 PM
 * Developer	: Sanyasi Rao
 * Company		: Sagarsoft India Ltd.
 * 
 * Description  :		
 * ------------------------------------------------------------------------------------------------------------------------------------------
 * This class shows up User details to update.
 * It takes data from session to show it to the user.
 * It saves updated data using service in background.
 * When user clicks on Edit button fields get enabled to update User details. It replaces Edit button with Done button.
 * When user clicks on Back button, it shows Categories screen.
 * When user clicks on Done button, it updates user details and shows Categories screen.
 * ------------------------------------------------------------------------------------------------------------------------------------------
 */
package com.newchitfund.androidclient;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ByteArrayBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.newchitfund.imagecaching.ImageLoader;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.Bitmap.Config;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class Settings extends Activity {

	private ImageView btnBack;
	private ImageView btnEditSettings;
	private ImageView btnSaveSettings;
	private ImageView ivMProfilePic;
	private String mId=null;
	private String mPhone=null;
	private EditText etMName;
	private EditText etMEmail;
	private EditText etMPhone;
	private EditText etMOldPassword;
	private EditText etMNewPassword;
	private EditText etMConfirmPassword;
	private SessionStorage sessionStorage;
	private final static int REQUEST_CAMERA = 0;
	private final static int SELECT_FILE = 1;
	private Bitmap bitmapSquare;
	private Bitmap bitmapRound;
	private byte[] ivMProfilePicInByte;
	private ByteArrayBody bob;	
	private JSONObject jsonResponse;
	private TextView tvLogout;
	private ImageLoader imgLoader;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.settings);
		super.onCreate(savedInstanceState);
		
		btnBack = (ImageView) findViewById(R.id.btn_back);
		btnEditSettings = (ImageView) findViewById(R.id.btn_editSettings);
		btnSaveSettings = (ImageView) findViewById(R.id.btn_saveSettings);
		ivMProfilePic = (ImageView) findViewById(R.id.iv_profPic);
		etMName = (EditText) findViewById(R.id.et_name);
		etMEmail = (EditText) findViewById(R.id.et_email);
		etMPhone = (EditText) findViewById(R.id.et_phone);
		etMOldPassword = (EditText) findViewById(R.id.et_oldPassword);
		etMNewPassword = (EditText) findViewById(R.id.et_newPassword);
		etMConfirmPassword = (EditText) findViewById(R.id.et_confirmPassword);
		tvLogout = (TextView) findViewById(R.id.tv_logout);
		
		// To hide Done button by default
		btnSaveSettings.setVisibility(View.INVISIBLE);
		
		// To disable fields by default
		ivMProfilePic.setEnabled(false);
		etMName.setEnabled(false);
		etMEmail.setEnabled(false);
		etMPhone.setEnabled(false);
		etMOldPassword.setEnabled(false);
		etMNewPassword.setEnabled(false);
		etMConfirmPassword.setEnabled(false);
		
		// Get session values
		HashMap<String, String> loggedInDetails = new HashMap<String, String>();
		sessionStorage = new SessionStorage(getApplicationContext());
		loggedInDetails = sessionStorage.getLoginDetails();

		// Used in other classes
		mId = loggedInDetails.get("MEMBER_ID");
		mPhone = loggedInDetails.get("MEMBER_PHONE");
		
		// Create image loader object to display Member profile image
		imgLoader = new ImageLoader(this);

		// Set session values to form fields or show user details
		imgLoader.DisplayImage(loggedInDetails.get("MEMBER_PROFILE_PIC"), ivMProfilePic);
		etMName.setText(loggedInDetails.get("MEMBER_NAME"));
		etMEmail.setText(loggedInDetails.get("MEMBER_EMAIL"));
		etMPhone.setText(mPhone);
		
		/**
		 * This event is triggered when user clicks on Back button. It shows Categories screen
		 */
		btnBack.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				Intent categoriesIntent = new Intent(Settings.this, Categories.class);
				startActivity(categoriesIntent);
				finish();			
			}
		});
		
		/**
		 * This event is triggered when user clicks on Edit button. The Edit button is changed to Done button to save data.
		 * It enables fields to let user update the details. 
		 */
		
		btnEditSettings.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				//btnEditSettings.sets

				// To hide Edit button and show Done button
				btnEditSettings.setVisibility(View.INVISIBLE);
				btnSaveSettings.setVisibility(View.VISIBLE);
				
				// To enable fields
				ivMProfilePic.setEnabled(true);
				etMEmail.setEnabled(true);
				etMOldPassword.setEnabled(true);
				etMNewPassword.setEnabled(true);
				etMConfirmPassword.setEnabled(true);

			}
		});
		
		/**
		 * This event is triggered when user click on Done button to save Member details.
		 */
		btnSaveSettings.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				
				// Convert bitmap to bytes
				if(bitmapSquare!=null) {
					ByteArrayOutputStream stream = new ByteArrayOutputStream();
					bitmapSquare.compress(Bitmap.CompressFormat.JPEG, 100, stream);
					ivMProfilePicInByte = stream.toByteArray();	
					bob = new ByteArrayBody(ivMProfilePicInByte, "temp.png");
				}
				
				if(true) {
					new SettingsAsyncTask().execute();
				}				
			}
		});
		
		/**
		 * This event is triggered when user clicks on Logout button. It clear user session and shows Login screen to user.
		 */
		tvLogout.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				new LogoutAsyncTask().execute();
			}
		});
		
		/**
		 * This click event triggers when user clicks on Profile picture.
		 * It takes photo with two options. 
		 * A)Camera B)Picture from Library
		 * It converts image to rounded shape. 
		 */
		ivMProfilePic.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				final CharSequence[] options = {"Take Photo", "Choose from Library", "Cancel"};
				AlertDialog.Builder builder = new AlertDialog.Builder(Settings.this);
				builder.setTitle("Add Photo!");
				builder.setItems(options, new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int option) {
						// TODO Auto-generated method stub
						if(options[option].equals("Take Photo")) {
							Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
							File imgFile = new File(android.os.Environment.getExternalStorageDirectory(), "temp.png");
							intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(imgFile));
							startActivityForResult(intent, REQUEST_CAMERA);
						}else if(options[option].equals("Choose from Library")) {
							Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
							intent.setType("image/*");
							startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_FILE);
						}else if(options[option].equals("Cancel")) {
							dialog.dismiss();
						}
					}
				});
				builder.show();
			}
		});
		
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == RESULT_OK) {
			if (requestCode == REQUEST_CAMERA) {
				File f = new File(Environment.getExternalStorageDirectory().toString());
				
				for (File temp : f.listFiles()) {
					if (temp.getName().equals("temp.png")) {
						f = temp;
						break;
					}
				}
				
				try {
					
					BitmapFactory.Options btmapOptions = new BitmapFactory.Options();

					bitmapSquare = BitmapFactory.decodeFile(f.getAbsolutePath(),
							btmapOptions);

					bitmapRound = MLRoundedImageView.getCroppedBitmap(bitmapSquare, 200);
					ivMProfilePic.setImageBitmap(bitmapRound);

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else if (requestCode == SELECT_FILE) {
				Uri selectedImageUri = data.getData();

				String tempPath = getPath(selectedImageUri, Settings.this);
				BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
				bitmapSquare = BitmapFactory.decodeFile(tempPath, btmapOptions);
				bitmapRound = MLRoundedImageView.getCroppedBitmap(bitmapSquare, 200);
				ivMProfilePic.setImageBitmap(bitmapRound);
			}
		}
	}
	
	/**
	 * This method returns path of the photo image
	 * @param uri - Image URI
	 * @param activity - Current activity
	 * @return path of the image
	 */
	public String getPath(Uri uri, Activity activity) {
		String[] projection = { MediaColumns.DATA };
		Cursor cursor = activity.managedQuery(uri, projection, null, null, null);
		int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);
		cursor.moveToFirst();
		return cursor.getString(column_index);
	}

	
	/**
	 * This class crops bitmap image to round shape
	 * @author sunny
	 *
	 */
	public static class MLRoundedImageView extends ImageView {
		 
		public MLRoundedImageView(Context context) {
			super(context);
		}
	 
		public MLRoundedImageView(Context context, AttributeSet attrs) {
			super(context, attrs);
		}
	 
		public MLRoundedImageView(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
		}
	 
		@Override
		protected void onDraw(Canvas canvas) {
	 
			Drawable drawable = getDrawable();
	 
			if (drawable == null) {
				return;
			}
	 
			if (getWidth() == 0 || getHeight() == 0) {
				return;
			}
			Bitmap b = ((BitmapDrawable) drawable).getBitmap();
			Bitmap bitmap = b.copy(Bitmap.Config.ARGB_8888, true);
	 
			int w = getWidth();
	 
			Bitmap roundBitmap = getCroppedBitmap(bitmap, w);
			canvas.drawBitmap(roundBitmap, 0, 0, null);
	 
		}
		
		/**
		 * This method crops bitmap image to round shape
		 * @param bmp - Object of bitmap image
		 * @param radius - Required radius of the bitmap image
		 * @return cropped bitmap image with round shape
		 */
		public static Bitmap getCroppedBitmap(Bitmap bmp, int radius) {
			Bitmap sbmp;
			
			if (bmp.getWidth() != radius || bmp.getHeight() != radius) {
				float smallest = Math.min(bmp.getWidth(), bmp.getHeight());
				float factor = smallest / radius;
				sbmp = Bitmap.createScaledBitmap(bmp, (int)(bmp.getWidth() / factor), (int)(bmp.getHeight() / factor), false);
			} else {
				sbmp = bmp;
			}
			
			Bitmap output = Bitmap.createBitmap(radius, radius,
					Config.ARGB_8888);
			Canvas canvas = new Canvas(output);
	 
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, radius, radius);
	 
			paint.setAntiAlias(true);
			paint.setFilterBitmap(true);
			paint.setDither(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(Color.parseColor("#BAB399"));
			canvas.drawCircle(radius / 2 + 0.7f,
					radius / 2 + 0.7f, radius / 2 + 0.1f, paint);
			paint.setXfermode(new PorterDuffXfermode(android.graphics.PorterDuff.Mode.SRC_IN));
			canvas.drawBitmap(sbmp, rect, rect, paint);
	 
			return output;
		}
	 
	}
	
	/**
	 * This class saves User details using service in background. After that it shows Categories screen to user.
	 * @author sunny
	 *
	 */
	class SettingsAsyncTask extends AsyncTask<Void, Void, String> {
		
		ProgressDialog pd;
		String sStatus=null, sMessage=null;
		
		@Override
		protected void onPreExecute() {
			pd = new ProgressDialog(Settings.this);
			pd.setIndeterminate(true);
			pd.setCancelable(false);
			pd.setMessage("Please wait...");
			pd.show();
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... arg0) {
			// TODO Auto-generated method stub
			try {
				
				String URL = getResources().getString(R.string.URL);
				
				HttpClient client = new DefaultHttpClient();
				HttpPost post = new HttpPost(URL);
				MultipartEntity multiEntity = new MultipartEntity();

				
				// Pass values to service
				
				// Static values
				multiEntity.addPart("call", new StringBody("changeSettings"));

				multiEntity.addPart("userID", new StringBody(mId));
				multiEntity.addPart("oldPassword", new StringBody(etMOldPassword.getText().toString()));
				multiEntity.addPart("newPassword", new StringBody(etMNewPassword.getText().toString()));
				
				if(bitmapSquare!=null) {
					multiEntity.addPart("profilePic", bob);
				}
				
				multiEntity.addPart("email", new StringBody(etMEmail.getText().toString()));
				
				
				post.setEntity(multiEntity);
				HttpResponse response = client.execute(post);
				String res = EntityUtils.toString(response.getEntity());
				
				Log.v("response", "Response: " + res);
				jsonResponse = new JSONObject(res);
				
				sStatus = jsonResponse.getString("Status");
				sMessage = jsonResponse.getString("Message");
				Log.e("Check", sStatus);
				if(sStatus.equalsIgnoreCase("Success")) {
					return "success";
				}
				
				if(!sMessage.equalsIgnoreCase("OK")) {
					return sMessage;
				}
				
			}catch(UnsupportedEncodingException e) {
				e.printStackTrace();
			}catch(ClientProtocolException e) {
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}catch(JSONException e){
				e.printStackTrace();
			}
			return null;
		}
		
		@Override
		protected void onPostExecute(String result) {
			
			if(pd.isShowing()){
				
				if(result.equalsIgnoreCase("success")) {
					
					// Show status message to user
					Toast.makeText(getApplicationContext(), "Your details are updated successfully", Toast.LENGTH_LONG).show();
					HashMap<String, String> hMapSignUpDetails = new HashMap<String,String>();

					// Store values in SessionStorage.java
					try {
						JSONArray jsonArray = jsonResponse.getJSONArray("Result");
						for (int i = 0; i < jsonArray.length(); i++) {
							JSONObject resultObj = jsonArray.getJSONObject(i);
							
							hMapSignUpDetails.put("MEMBER_ID", resultObj.getString("userID"));
							hMapSignUpDetails.put("MEMBER_NAME", resultObj.getString("name"));
							hMapSignUpDetails.put("MEMBER_EMAIL", resultObj.getString("email"));
							hMapSignUpDetails.put("MEMBER_PROFILE_PIC", resultObj.getString("profilePic"));
							hMapSignUpDetails.put("MEMBER_PHONE", resultObj.getString("phone"));
							hMapSignUpDetails.put("MEMBER_ADMIN_ID", resultObj.getString("adminID"));
							hMapSignUpDetails.put("MEMBER_ROLE", resultObj.getString("role"));
							hMapSignUpDetails.put("MEMBER_MEMBERSHIP", resultObj.getString("membershipStatus"));
							hMapSignUpDetails.put("MEMBER_CREATED_ON", resultObj.getString("createdOn"));
						}
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					SessionStorage sessionStorage=new SessionStorage(getApplicationContext());
					sessionStorage.storeLoginDetails(hMapSignUpDetails);
					
					pd.dismiss();
					
					// Navigate to Categories
					Intent menu = new Intent(Settings.this, Categories.class);
					startActivity(menu);
					finish();					
				}else {
					pd.dismiss();
					
					// Show status message to user
					Toast.makeText(getApplicationContext(), result, Toast.LENGTH_LONG).show();
				}

			}
			super.onPostExecute(result);
		}
	}	
	
	
	/**
	 * This class clears user session using service in background and navigate to Login screen.
	 * @author sunny
	 *
	 */
	class LogoutAsyncTask extends AsyncTask<Void, Void, String> {
		
		ProgressDialog pd;
		String sStatus=null, sMessage=null;
		
		@Override
		protected void onPreExecute() {
			pd = new ProgressDialog(Settings.this);
			pd.setIndeterminate(true);
			pd.setCancelable(false);
			pd.setMessage("Please wait..");
			pd.show();
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... arg0) {
			try {
				String URL = getResources().getString(R.string.URL);
				
				HttpClient client = new DefaultHttpClient();
				HttpPost post = new HttpPost(URL);
				MultipartEntity multiEntity = new MultipartEntity();
	
				
				// Pass values to service
				
				// Static values
				multiEntity.addPart("call", new StringBody("logout"));
	
				multiEntity.addPart("phone", new StringBody(mPhone));
				
				post.setEntity(multiEntity);
				HttpResponse response = client.execute(post);
				String res = EntityUtils.toString(response.getEntity());
				
				Log.v("response", "Response: " + res);
				jsonResponse = new JSONObject(res);
				
				sStatus = jsonResponse.getString("Status");
				sMessage = jsonResponse.getString("Message");
				
				if(sStatus.equalsIgnoreCase("Success")) {
					return "success";
				}
				
				if(!sMessage.equalsIgnoreCase("OK")) {
					return sMessage;
				}
				
			}catch(UnsupportedEncodingException e) {
				e.printStackTrace();
			}catch(ClientProtocolException e) {
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}catch(JSONException e){
				e.printStackTrace();
			}
			return null;
			
		}
		
		@Override
		protected void onPostExecute(String result) {
			
			if(pd.isShowing()){
				if(result.equalsIgnoreCase("success")) {
					
					// Show status message to user
					Toast.makeText(getApplicationContext(), "You have been logout successfully", Toast.LENGTH_LONG).show();
					
					pd.dismiss();

					if(result.equals("success")) {
						// Clear session data
						sessionStorage.clearKeys();
						
						// Navigate to Login screen
						Intent menu = new Intent(Settings.this, Login.class);
						startActivity(menu);
						finish();	
					}
					
				}else {
					pd.dismiss();
			        
					Toast.makeText(getApplicationContext(), result, Toast.LENGTH_LONG).show();
				}
			}
			super.onPostExecute(result);
		}
	}
	
	@Override
	public void onBackPressed() {
		Intent categoriesIntent = new Intent(Settings.this, Categories.class);
		startActivity(categoriesIntent);
		finish();
		super.onBackPressed();
	}	
	
}

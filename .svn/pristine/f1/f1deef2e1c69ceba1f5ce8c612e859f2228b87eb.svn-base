package com.newchitfund.androidclient;

import java.util.HashMap;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.provider.ContactsContract.CommonDataKinds.Email;
import android.util.Log;

public class SessionStorage {

	// Shared Preferences
	SharedPreferences pref;

	// Editor for Shared preferences
	Editor editor;

	// Context
	Context _context;

	// Shared pref mode
	int PRIVATE_MODE = 0;	

	final static public String ACCOUNT_PREFS_NAME = "prefs";
	final static private String FACEBOOK_PREFS_NAME = "facebookprefs";


	final static private String ACCESS_KEY_NAME = "ACCESS_KEY";
	final static private String ACCESS_SECRET_NAME = "ACCESS_SECRET";
	final static private String ACCESS_USER_ID = "ACCESS_USER_ID";
	final static private String ACCESS_EMAIL_ID = "ACCESS_EMAIL_ID";
	//final static private String SELECTED_IMAGE_NAME = "IMAGE_NAME";


	// Constructor
	public SessionStorage(Context context){
		this._context = context;
		pref = _context.getSharedPreferences(ACCOUNT_PREFS_NAME, PRIVATE_MODE);
		editor = pref.edit();
	}

	public SessionStorage(Context context,String PreferenceName){
		this._context = context;
		pref = _context.getSharedPreferences(PreferenceName, PRIVATE_MODE);
		editor = pref.edit();
	}

	public void storeLoginDetails(HashMap<String, String> loginDetails) {
		// Save the access key for later
		SharedPreferences prefs = _context.getSharedPreferences(ACCOUNT_PREFS_NAME, 0);
		Editor edit = prefs.edit();
		
		edit.putString("USER_ID",loginDetails.get("userID"));
		edit.putString("ADMIN_ID",loginDetails.get("adminID"));
		edit.putString("USER_ROLE",loginDetails.get("role"));
		
		edit.putString("USER_NAME",loginDetails.get("USER_NAME"));
		edit.putString("USER_MAIL",loginDetails.get("USER_MAIL"));
		edit.putString("USER_PIC",loginDetails.get("USER_PIC"));
		edit.putString("USER_STATECODE",loginDetails.get("USER_STATECODE"));
		edit.putString("USER_ENABLENOTIF",loginDetails.get("USER_ENABLENOTIF"));
		edit.putString("USER_MEGAMILLONNOTIF",loginDetails.get("USER_MEGAMILLONNOTIF"));
		edit.putString("USER_POWERBALLNOTIF",loginDetails.get("USER_POWERBALLNOTIF"));
		edit.putString("USER_BUYTICREMINDER",loginDetails.get("USER_BUYTICREMINDER"));
		edit.putString("USER_CHKRESULTREMINDER",loginDetails.get("USER_CHKRESULTREMINDER"));
		edit.putString("USER_WINORLOSENOTIF",loginDetails.get("USER_WINORLOSENOTIF"));
		
		edit.putString("USER_PBJACKPOTNOTIF",loginDetails.get("USER_PBJACKPOTNOTIF"));
		edit.putString("USER_PBJACKPOTAMOUNT",loginDetails.get("USER_PBJACKPOTAMOUNT"));
		edit.putString("USER_MMJACKPOTNOTIF",loginDetails.get("USER_MMJACKPOTNOTIF"));
		edit.putString("USER_MMJACKPOTAMOUNT",loginDetails.get("USER_MMJACKPOTAMOUNT"));		
		
		edit.putString("USER_CREATEDON",loginDetails.get("USER_CREATEDON"));
		edit.commit();
	}

	/**
	 * Shows keeping the access keys returned from Trusted Authenticator in a local
	 * store, rather than storing user name & password, and re-authenticating each
	 * time (which is not to be done, ever).
	 */
	public void storeKeys(String key, String secret,String userId,String emailId) {
		// Save the access key for later
		SharedPreferences prefs = _context.getSharedPreferences(ACCOUNT_PREFS_NAME, 0);
		Editor edit = prefs.edit();
		edit.putString(ACCESS_KEY_NAME, key);
		edit.putString(ACCESS_SECRET_NAME, secret);
		edit.putString(ACCESS_USER_ID, userId);
		edit.putString(ACCESS_EMAIL_ID, emailId);

		edit.commit();
	}

	
	/**
	 * Shows keeping the access keys returned from Trusted Authenticator in a local
	 * store, rather than storing user name & password, and re-authenticating each
	 * time (which is not to be done, ever).
	 *
	 * @return Array of [access_key, access_secret], or null if none stored
	 */
	public HashMap<String, String> getLoggedInUserDetails() {
		HashMap<String, String> hmloginDetails= null;//new HashMap<String, String>();
		SharedPreferences prefs = _context.getSharedPreferences(ACCOUNT_PREFS_NAME, 0);
		String loggeedInUserId = prefs.getString("USER_ID", null);
		String loggeedInUserName = prefs.getString("USER_NAME", null);
		String loggeedInUserMail = prefs.getString("USER_MAIL", null);
		String loggeedInUserPic = prefs.getString("USER_PIC", null);
		String loggeedInUserStaeCode = prefs.getString("USER_STATECODE", null);
		String loggeedInUserEnableNotif = prefs.getString("USER_ENABLENOTIF", null);
		String loggeedInUserMegaMillionNotif = prefs.getString("USER_MEGAMILLONNOTIF", null);
		String loggeedInUserPowerBallNotif = prefs.getString("USER_POWERBALLNOTIF", null);
		String loggeedInUserBuyTicReminder = prefs.getString("USER_BUYTICREMINDER", null);
		String loggeedInUserChkResultReminder = prefs.getString("USER_CHKRESULTREMINDER", null);
		String loggeedInUserWinOrLossReminder = prefs.getString("USER_WINORLOSENOTIF", null);
		
		String loggeedInUserPbJackpotReminder = prefs.getString("USER_PBJACKPOTNOTIF", null);
		String loggeedInUserPbJackpotAmount = prefs.getString("USER_PBJACKPOTAMOUNT", null);
		String loggeedInUserMmJackpotReminder = prefs.getString("USER_MMJACKPOTNOTIF", null);
		String loggeedInUserMmJackpotAmount = prefs.getString("USER_MMJACKPOTAMOUNT", null);
		
		
		String loggeedInUserCreatedOn = prefs.getString("USER_CREATEDON", null);

		if(loggeedInUserId!=null){
			hmloginDetails=new HashMap<String, String>();
			hmloginDetails.put("USER_ID", loggeedInUserId);
			hmloginDetails.put("USER_NAME", loggeedInUserName);
			hmloginDetails.put("USER_MAIL", loggeedInUserMail);

			hmloginDetails.put("USER_PIC", loggeedInUserPic);
			hmloginDetails.put("USER_STATECODE", loggeedInUserStaeCode);
			hmloginDetails.put("USER_ENABLENOTIF", loggeedInUserEnableNotif);

			hmloginDetails.put("USER_MEGAMILLONNOTIF", loggeedInUserMegaMillionNotif);
			hmloginDetails.put("USER_POWERBALLNOTIF", loggeedInUserPowerBallNotif);
			hmloginDetails.put("USER_BUYTICREMINDER", loggeedInUserBuyTicReminder);

			hmloginDetails.put("USER_CHKRESULTREMINDER", loggeedInUserChkResultReminder);
			hmloginDetails.put("USER_WINORLOSENOTIF", loggeedInUserWinOrLossReminder);
			
			hmloginDetails.put("USER_PBJACKPOTNOTIF", loggeedInUserPbJackpotReminder);
			hmloginDetails.put("USER_PBJACKPOTAMOUNT", loggeedInUserPbJackpotAmount);
			hmloginDetails.put("USER_MMJACKPOTNOTIF", loggeedInUserMmJackpotReminder);
			hmloginDetails.put("USER_MMJACKPOTAMOUNT", loggeedInUserMmJackpotAmount);
			
			hmloginDetails.put("USER_CREATEDON", loggeedInUserCreatedOn);
		}
		return hmloginDetails;


	}

	/**
	 * Shows keeping the access keys returned from Trusted Authenticator in a local
	 * store, rather than storing user name & password, and re-authenticating each
	 * time (which is not to be done, ever).
	 *
	 * @return Array of [access_key, access_secret], or null if none stored
	 */



	/**
	 * Clears stored session variable values
	 */
	public void clearKeys() {
		Log.v("Inside Session Storage","Clear Keys===");
		SharedPreferences prefs = _context.getSharedPreferences(ACCOUNT_PREFS_NAME, 0);
		Editor edit = prefs.edit();
		edit.clear();
		edit.commit();

		SharedPreferences prefs1 = _context.getSharedPreferences(FACEBOOK_PREFS_NAME, 0);
		Editor edit1 = prefs.edit();
		edit1.clear();
		edit1.commit();		

	}






}

/**
 * Project Name	: Chitfund
 * Class Name	: Login
 * Date			: 29-05-2014, 04:09 PM
 * Developer	: Sanyasi Rao A
 * Company		: Sagarsoft India Ltd.
 * 
 * Description  :		
 * ------------------------------------------------------------------------------------------------------------------------------------------
 * This class shows up Login screen to user.
 * It authenticates user by validating user credentials when user click on Login button
 * Form Fields - Username (Registered Mobile number) and Password.
 * It sends new password to user's registered email ID using service when user click on 'Forgot Password' link provided user entered Username (Registered Mobile number)
 * If the user already logged in then it shows Categories screen.
 * It shows 'Categories - Admin' screen to user having role Admin.
 * It shows 'Categrories - User' screen to user having role Owner/User.
 * When user clicks on 'Sign up now' button it shows Sign up screen to user. 
 * ------------------------------------------------------------------------------------------------------------------------------------------
 */
package com.newchitfund.androidclient;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.regex.Pattern;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;

public class Login extends Activity {

	private EditText etUserName;
	private EditText etPassword;
	private TextView tvForgotPass;
	private TextView tvNotMember;
	private TextView tvSignUp;
	private String evMUsernameVal=null; 
	private String etMPasswordVal=null;
	private JSONObject jsonResponse;
	private String memberID;
	private Boolean checkNet = false;

	private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
	public static final String EXTRA_MESSAGE = "message";
	public static final String PROPERTY_REG_ID = "registration_id";
	private static final String PROPERTY_APP_VERSION = "appVersion";

	/**
	 * Substitute you own sender ID here. This is the project number you got
	 * from the API Console, as described in "Getting Started."
	 */
	static String SENDER_ID = "989035794503";

	/**
	 * Tag used on log messages.
	 */
	static final String TAG = "GCM";
	GoogleCloudMessaging gcm;
	String regid;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.login);
		super.onCreate(savedInstanceState);

		
		// If user has not log out then show Categories screen
		HashMap<String, String> loggedInDetails = new HashMap<String, String>();
		SessionStorage sessionStorage = new SessionStorage(getApplicationContext());
		loggedInDetails = sessionStorage.getLoginDetails();
		memberID = loggedInDetails.get("MEMBER_ID");

		if(memberID != null && !(memberID.isEmpty())) {
			Intent categories = new Intent(Login.this, Categories.class);
			startActivity(categories);
			finish();
		}

		
		// Check device for Play Services APK. If check succeeds, proceed with
		//  GCM registration.
		if (checkPlayServices()) {
			gcm = GoogleCloudMessaging.getInstance(this);
			regid = getRegistrationId(getApplicationContext());

			if (regid.isEmpty()) {
				new RegisterInBackground().execute();
			}
		} else {
			Log.i(TAG, "No valid Google Play Services APK found.");
		}

		// Get template object - to use events
		Button btnLogin = (Button) findViewById(R.id.btn_login);

		// Get template objects
		etUserName = (EditText) findViewById(R.id.et_mUsername);
		etPassword = (EditText) findViewById(R.id.et_mPassword);
		tvForgotPass = (TextView) findViewById(R.id.tv_forgotPassword);
		tvNotMember = (TextView) findViewById(R.id.tv_notMember);
		tvSignUp = (TextView) findViewById(R.id.tv_signUp);

		// Change fonts of text in the template
		tvForgotPass.setTypeface((Typeface.createFromAsset(getAssets(),"fonts/Roboto-Light.ttf")));
		tvNotMember.setTypeface((Typeface.createFromAsset(getAssets(),"fonts/Roboto-Light.ttf")));
		tvSignUp.setTypeface((Typeface.createFromAsset(getAssets(),"fonts/Roboto-Light.ttf")));

		/**
		 * This click event is triggered when user clicks on Login button
		 * It validates user input.
		 * It authenticates user data by service in background.
		 * It shows Categories screen to user based on role after successful authentication.
		 */
		btnLogin.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				boolean validation = false;

				// Get input values
				evMUsernameVal = etUserName.getText().toString();
				etMPasswordVal = etPassword.getText().toString();

				// Validate user input
				if(evMUsernameVal==null || evMUsernameVal.length()<=0) {
					Toast.makeText(getApplicationContext(), "Please enter Username", Toast.LENGTH_SHORT).show();
				}else if(evMUsernameVal.length()!=10 || evMUsernameVal.equalsIgnoreCase("0000000000")) {
					Toast.makeText(getApplicationContext(), "Please enter valid Username", Toast.LENGTH_SHORT).show();
				}else if(etMPasswordVal==null || etMPasswordVal.length()<=0) {
					Toast.makeText(getApplicationContext(), "Please enter Password", Toast.LENGTH_SHORT).show();
				}else{
					
					// Password should contain at least one number
	   			    int combinations = 0;
					if(Pattern.compile("[0-9]").matcher(etMPasswordVal).find()) {
					        combinations = combinations + 10;
					}
					
					if(etMPasswordVal.length()<3 || combinations==0) {
						Toast.makeText(getApplicationContext(), "Please enter valid Password", Toast.LENGTH_SHORT).show();
					}else{
						validation = true;
					}
				}
				
				if(validation) {
					// Authenticate user
					new LoginAsyncTask().execute();
				}

			}
		});

		/**
		 * This event is triggered when user clicks on 'Forgot Password' link
		 * It sends new password to the user's registered email ID using service provided user enters Username.  
		 */
		tvForgotPass.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				// Get User Name input value
				evMUsernameVal = etUserName.getText().toString();

				if(evMUsernameVal==null || evMUsernameVal.length()<=0) {
					Toast.makeText(getApplicationContext(), "Please enter Username to get password to your registered email ID", Toast.LENGTH_LONG).show();
				}else if(evMUsernameVal.length()!=10 || evMUsernameVal.equalsIgnoreCase("0000000000")) {
					Toast.makeText(getApplicationContext(), "Please enter valid Username", Toast.LENGTH_SHORT).show();
				}
				else {
					// Send mail to user's registered email ID by service in background
					new ForgotAsyncTask().execute();
				}
			}
		});
		
		etPassword.setOnEditorActionListener(new OnEditorActionListener() {
	        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
	            if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {
	            	boolean validation = false;

					// Get input values
					evMUsernameVal = etUserName.getText().toString();
					etMPasswordVal = etPassword.getText().toString();

					// Validate user input
					if(evMUsernameVal==null || evMUsernameVal.length()<=0) {
						Toast.makeText(getApplicationContext(), "Please enter Username", Toast.LENGTH_SHORT).show();
					}else if(evMUsernameVal.length()!=10 || evMUsernameVal.equalsIgnoreCase("0000000000")) {
						Toast.makeText(getApplicationContext(), "Please enter valid Username", Toast.LENGTH_SHORT).show();
					}else if(etMPasswordVal==null || etMPasswordVal.length()<=0) {
						Toast.makeText(getApplicationContext(), "Please enter Password", Toast.LENGTH_SHORT).show();
					}else{
						
						// Password should contain at least one number
		   			    int combinations = 0;
						if(Pattern.compile("[0-9]").matcher(etMPasswordVal).find()) {
						        combinations = combinations + 10;
						}
						
						if(etMPasswordVal.length()<3 || combinations==0) {
							Toast.makeText(getApplicationContext(), "Please enter valid Password", Toast.LENGTH_SHORT).show();
						}else{
							validation = true;
						}
					}
					
					if(validation) {
						// Authenticate user
						new LoginAsyncTask().execute();
					}	                
	            }  
				return false;
	        }
	    });
		
	/*	etPassword.setOnEditorActionListener(new OnEditorActionListener() {
			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				// TODO Auto-generated method stub
				if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {
	                Log.i(TAG,"Enter pressed");

					boolean validation = false;

					// Get input values
					evMUsernameVal = etUserName.getText().toString();
					etMPasswordVal = etPassword.getText().toString();

					// Validate user input
					if(evMUsernameVal==null || evMUsernameVal.length()<=0) {
						Toast.makeText(getApplicationContext(), "Please enter Username", Toast.LENGTH_SHORT).show();
					}else if(evMUsernameVal.length()!=10 || evMUsernameVal.equalsIgnoreCase("0000000000")) {
						Toast.makeText(getApplicationContext(), "Please enter valid Username", Toast.LENGTH_SHORT).show();
					}else if(etMPasswordVal==null || etMPasswordVal.length()<=0) {
						Toast.makeText(getApplicationContext(), "Please enter Password", Toast.LENGTH_SHORT).show();
					}else{
						
						// Password should contain at least one number
		   			    int combinations = 0;
						if(Pattern.compile("[0-9]").matcher(etMPasswordVal).find()) {
						        combinations = combinations + 10;
						}
						
						if(etMPasswordVal.length()<3 || combinations==0) {
							Toast.makeText(getApplicationContext(), "Please enter valid Password", Toast.LENGTH_SHORT).show();
						}else{
							validation = true;
						}
					}
					
					if(validation) {
						// Authenticate user
						new LoginAsyncTask().execute();
					}	                
	            }  
				return false;
			}
	    });*/
	}

	/**
	 * Check the device to make sure it has the Google Play Services APK. If
	 * it doesn't, display a dialog that allows users to download the APK from
	 * the Google Play Store or enable it in the device's system settings.
	 */
	private boolean checkPlayServices() {
		int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
		if (resultCode != ConnectionResult.SUCCESS) {
			if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
				GooglePlayServicesUtil.getErrorDialog(resultCode, this,
						PLAY_SERVICES_RESOLUTION_REQUEST).show();
			} else {
				Log.i(TAG, "This device is not supported.");
				finish();
			}
			return false;
		}
		return true;
	}

	
	/**
	 * Gets the current registration ID for application on GCM service.
	 * <p>
	 * If result is empty, the app needs to register.
	 *
	 * @return registration ID, or empty string if there is no existing
	 *         registration ID.
	 */
	private String getRegistrationId(Context context) {
	    final SharedPreferences prefs = getGCMPreferences(context);
	    String registrationId = prefs.getString(PROPERTY_REG_ID, "");
	    if (registrationId.isEmpty()) {
	        Log.i(TAG, "Registration not found.");
	        return "";
	    }
	    // Check if app was updated; if so, it must clear the registration ID
	    // since the existing regID is not guaranteed to work with the new
	    // app version.
	    int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
	    int currentVersion = getAppVersion(context);
	    if (registeredVersion != currentVersion) {
	        Log.i(TAG, "App version changed.");
	        return "";
	    }
	    return registrationId;
	}
	
	/**
	 * @return Application's {@code SharedPreferences}.
	 */
	private SharedPreferences getGCMPreferences(Context context) {
	    // This sample app persists the registration ID in shared preferences, but
	    // how you store the regID in your app is up to you.
	    return getSharedPreferences(SessionStorage.ACCOUNT_PREFS_NAME, Context.MODE_PRIVATE);
	}

	
	/**
	 * @return Application's version code from the {@code PackageManager}.
	 */
	private static int getAppVersion(Context context) {
	    try {
	        PackageInfo packageInfo = context.getPackageManager()
	                .getPackageInfo(context.getPackageName(), 0);
	        return packageInfo.versionCode;
	    } catch (NameNotFoundException e) {
	        // should never happen
	        throw new RuntimeException("Could not get package name: " + e);
	    }
	}
	
	/**
	 * This method shows Sign Up screen to user when user clicks on 'Sign Up' link.
	 * @param v - View
	 */
	public void signUpNow(View v) {
		startActivity(new Intent(Login.this, SignUp.class));
		finish();
	}


	
	/**
	 * Registers the application with GCM servers asynchronously.
	 * <p>
	 * Stores the registration ID and app versionCode in the application's
	 * shared preferences.
	 */
	 class RegisterInBackground extends AsyncTask<Void, Void, String>
	 {

		@Override
		protected String doInBackground(Void... params) {
			String msg = "";
            try {
                if (gcm == null) {
                    gcm = GoogleCloudMessaging.getInstance(getApplicationContext());
                }
                regid = gcm.register(SENDER_ID);
                msg = "Device registered, registration ID=" + regid;

                // Persist the regID - no need to register again.
                storeRegistrationId(getApplicationContext(), regid);
            } catch (IOException ex) {
                msg = "Error :" + ex.getMessage();
                // If there is an error, don't just keep trying to register.
                // Require the user to click a button again, or perform
                // exponential back-off.
            }
            return msg;
		}
		
	 }
	 
	 /**
	  * Stores the registration ID and app versionCode in the application's
	  * {@code SharedPreferences}.
	  *
	  * @param context application's context.
	  * @param regId registration ID
	  */
	 private void storeRegistrationId(Context context, String regId) {
	     final SharedPreferences prefs = getGCMPreferences(context);
	     int appVersion = getAppVersion(context);
	     Log.i(TAG, "Saving regId on app version " + appVersion);
	     SharedPreferences.Editor editor = prefs.edit();
	     editor.putString(PROPERTY_REG_ID, regId);
	     editor.putInt(PROPERTY_APP_VERSION, appVersion);
	     editor.commit();
	 }
	
	
	/**
	 * This class add new user details by service in background 
	 * @author sunny
	 * 
	 */
	class LoginAsyncTask extends AsyncTask<Void, Void, String> {

		ProgressDialog pd;
		String sStatus=null, sMessage=null;

		@Override
		protected void onPreExecute() {
			pd = new ProgressDialog(Login.this);
			pd.setIndeterminate(true);
			pd.setCancelable(false);
			pd.setMessage("Please wait...");
			pd.show();
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... arg0) {

			try {
				
				// Check network connection to call service 
				checkNet = Utils.isInternetAvailable(Login.this);
				
				if(checkNet){
					String URL = getResources().getString(R.string.URL);
					String adminID = getResources().getString(R.string.adminID);

					HttpClient client = new DefaultHttpClient();
					HttpPost post = new HttpPost(URL);
					MultipartEntity multiEntity = new MultipartEntity();

					multiEntity.addPart("phone", new StringBody(evMUsernameVal));
					multiEntity.addPart("password", new StringBody(etMPasswordVal));

					// Value from strings.xml
					multiEntity.addPart("adminID", new StringBody(adminID));

					// Static values
					multiEntity.addPart("call", new StringBody("login"));
					multiEntity.addPart("deviceType", new StringBody("Android"));
					
					//sending registration ID
					SharedPreferences prefs = getGCMPreferences(getApplicationContext());
					multiEntity.addPart("deviceToken", new StringBody(prefs.getString(PROPERTY_REG_ID, "regId")));

					post.setEntity(multiEntity);
					HttpResponse response = client.execute(post);
					String res = EntityUtils.toString(response.getEntity());

					//Log.v("response", "Response: " + res);
					jsonResponse = new JSONObject(res);

					sStatus = jsonResponse.getString("Status");
					sMessage = jsonResponse.getString("Message");

					if(sStatus.equalsIgnoreCase("Success")) {
						return "success";
					}

					if(!sMessage.equalsIgnoreCase("OK")) {
						return sMessage;
					}					
				}

			}catch(UnsupportedEncodingException e) {
				e.printStackTrace();
			}catch(ClientProtocolException e) {
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}catch(JSONException e){
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {

			if(pd.isShowing()){
				if(!checkNet){
					pd.dismiss();
					Toast.makeText(Login.this, "Please check network connection", Toast.LENGTH_SHORT).show();
				}else if(result.equalsIgnoreCase("success")) {

					HashMap<String, String> hMapSignUpDetails = new HashMap<String,String>();

					// Store user details in session using SessionStorage.java
					try {
						JSONArray jsonArray = jsonResponse.getJSONArray("Result");
						for (int i = 0; i < jsonArray.length(); i++) {
							JSONObject resultObj = jsonArray.getJSONObject(i);

							hMapSignUpDetails.put("MEMBER_ID", resultObj.getString("userID"));
							hMapSignUpDetails.put("MEMBER_NAME", resultObj.getString("name"));
							hMapSignUpDetails.put("MEMBER_EMAIL", resultObj.getString("email"));
							hMapSignUpDetails.put("MEMBER_PROFILE_PIC", resultObj.getString("profilePic"));
							hMapSignUpDetails.put("MEMBER_PHONE", resultObj.getString("phone"));
							hMapSignUpDetails.put("MEMBER_ADMIN_ID", resultObj.getString("adminID"));
							hMapSignUpDetails.put("MEMBER_ROLE", resultObj.getString("role"));
							hMapSignUpDetails.put("MEMBER_MEMBERSHIP", resultObj.getString("membershipStatus"));
							hMapSignUpDetails.put("MEMBER_CREATED_ON", resultObj.getString("createdOn"));
						}
					} catch (JSONException e) {
						e.printStackTrace();
					}

					SessionStorage sessionStorage=new SessionStorage(getApplicationContext());
					sessionStorage.storeLoginDetails(hMapSignUpDetails);

					pd.dismiss();

					// Navigate to Categories
					Intent menu = new Intent(Login.this, Categories.class);
					startActivity(menu);
					finish();
					
				}else {
					
					pd.dismiss();

					// Show status message to user
					new AlertDialog.Builder(Login.this)
					.setTitle("Message")
					.setMessage(result)
					.setPositiveButton("OK", new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
						}
					})
					.show();

					//Toast.makeText(getApplicationContext(), result, Toast.LENGTH_LONG).show();
				}

			}
			super.onPostExecute(result);
		}
	}


	/**
	 * This class sends new password to user's registered email ID using service in background. 
	 * @author sunny
	 * 
	 */
	class ForgotAsyncTask extends AsyncTask<Void, Void, String> {

		ProgressDialog pd;
		String sStatus=null, sMessage=null;

		@Override
		protected void onPreExecute() {
			pd = new ProgressDialog(Login.this);
			pd.setIndeterminate(true);
			pd.setCancelable(false);
			pd.setMessage("Please wait...");
			pd.show();
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... arg0) {
			try {
				
				// Check network connection to call service 
				checkNet = Utils.isInternetAvailable(Login.this);
				
				if(checkNet){
					String URL = getResources().getString(R.string.URL);

					HttpClient client = new DefaultHttpClient();
					HttpPost post = new HttpPost(URL);
					MultipartEntity multiEntity = new MultipartEntity();

					multiEntity.addPart("phone", new StringBody(evMUsernameVal));

					// Static values
					multiEntity.addPart("call", new StringBody("forgotPassword"));
					multiEntity.addPart("deviceType", new StringBody("Android/IOS"));
					multiEntity.addPart("deviceToken", new StringBody("ASD123A"));

					post.setEntity(multiEntity);
					HttpResponse response = client.execute(post);
					String res = EntityUtils.toString(response.getEntity());

					//Log.v("response", "Response: " + res);
					jsonResponse = new JSONObject(res);

					sStatus = jsonResponse.getString("Status");
					sMessage = jsonResponse.getString("Message");

					if(sStatus.equalsIgnoreCase("Success")) {
						return "success";
					}

					if(!sMessage.equalsIgnoreCase("OK")) {
						return sMessage;
					}					
				}

			}catch(UnsupportedEncodingException e) {
				e.printStackTrace();
			}catch(ClientProtocolException e) {
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}catch(JSONException e){
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {

			if(pd.isShowing()) {

				if(!checkNet){
					pd.dismiss();
					Toast.makeText(Login.this, "Please check network connection", Toast.LENGTH_SHORT).show();
				}else if(result.equalsIgnoreCase("success")) {
					pd.dismiss();

					// Show status message to user
					Toast.makeText(getApplicationContext(), "Password is sent to your registered email ID.", Toast.LENGTH_LONG).show();
				}else {
					pd.dismiss();

					// Show status message to user
					new AlertDialog.Builder(Login.this)
					.setTitle("Message")
					.setMessage(result)
					.setPositiveButton("OK", new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
						}
					})
					.show();

					//Toast.makeText(getApplicationContext(), result, Toast.LENGTH_LONG).show();
				}
			}
			super.onPostExecute(result);
		}
	}

	
}
